[
  {
    "objectID": "internal-functions-2.html",
    "href": "internal-functions-2.html",
    "title": "Internal functions 2",
    "section": "",
    "text": "The only function exported by BioFindr.jl is the findr function itself. Nevertheless, many of the internal functions may be useful when digging deeper in the results for specific genes. The package documentation contains detailed descriptions of all package functions, intertwined with the methods section of the original paper, and should give a good overview of what is available.\nIn this tutorial we consider the situation where you have a single gene of interest and want to compute genetic association statistics for a set of variants of interest (for instance when doing a GWAS analysis for that gene). The approach from the association analysis tutorial cannot be followed in this case, because the exported findr function assumes that many target genes (“B” genes) are tested against one or more variants and uses the distribution of likelihood ratios across all target genes for Bayesian inference of posterior probabilities. If only one or a small number of genes are tested, this is no longer possible. Nevertheless it is still possible to compute p-values under the null hypothesis of the linkage test in this situation."
  },
  {
    "objectID": "internal-functions-2.html#introduction",
    "href": "internal-functions-2.html#introduction",
    "title": "Internal functions 2",
    "section": "",
    "text": "The only function exported by BioFindr.jl is the findr function itself. Nevertheless, many of the internal functions may be useful when digging deeper in the results for specific genes. The package documentation contains detailed descriptions of all package functions, intertwined with the methods section of the original paper, and should give a good overview of what is available.\nIn this tutorial we consider the situation where you have a single gene of interest and want to compute genetic association statistics for a set of variants of interest (for instance when doing a GWAS analysis for that gene). The approach from the association analysis tutorial cannot be followed in this case, because the exported findr function assumes that many target genes (“B” genes) are tested against one or more variants and uses the distribution of likelihood ratios across all target genes for Bayesian inference of posterior probabilities. If only one or a small number of genes are tested, this is no longer possible. Nevertheless it is still possible to compute p-values under the null hypothesis of the linkage test in this situation."
  },
  {
    "objectID": "internal-functions-2.html#set-up-the-environment",
    "href": "internal-functions-2.html#set-up-the-environment",
    "title": "Internal functions 2",
    "section": "Set up the environment",
    "text": "Set up the environment\n\nusing DrWatson\nquickactivate(@__DIR__)\n\nusing DataFrames\nusing Arrow\nusing StatsPlots\nusing LaTeXStrings\nusing Distributions\n\nusing BioFindr"
  },
  {
    "objectID": "internal-functions-2.html#load-data",
    "href": "internal-functions-2.html#load-data",
    "title": "Internal functions 2",
    "section": "Load data",
    "text": "Load data\nYou should by now be familiar with the GEUVADIS data used in the First steps tutorials. Here we need the following files:\n\ndt = DataFrame(Arrow.Table(datadir(\"exp_pro\",\"findr-data-geuvadis\", \"dt.arrow\")));\ndg = DataFrame(Arrow.Table(datadir(\"exp_pro\",\"findr-data-geuvadis\", \"dgt.arrow\")));\n\nSet the gene of interest:\n\ngene = names(dt)[10]\n\n\"ENSG00000125124.6\""
  },
  {
    "objectID": "internal-functions-2.html#run-the-analysis",
    "href": "internal-functions-2.html#run-the-analysis",
    "title": "Internal functions 2",
    "section": "Run the analysis",
    "text": "Run the analysis\n\nConvert the data\nInternally, all BioFindr.jl functions use matrix-based inputs and supernormalized data. The easiest way to convert our data is to run supernormalize on the initial data:\n\nYg = vec(BioFindr.supernormalize(select(dt,gene)));\n\nFor the genotype data, no conversion is needed:\n\nG = Matrix(dg);\n\nWe will also need the number of samples:\n\nns = length(Yg);\n\n\n\nCompute null p-values\nThroughout the package, the likelihood ratio tests are labelled by the following symbols\n\nTest 2 (Linkage test): :link\nTest 3 (Mediation test): :med\nTest 4 (Relevance test): :relev\nTest 5 (Pleiotropy test): :pleio\n\nFor genetic association testing, we only need the linkage test.\nSince all log-likelihood ratios are computed from the same summary statistics, a single function computes them all. To compute the log-likelihood ratios for a specific A-gene (here: hsa-miR-200b-3p with column vector of expression data Ym) with a causal instrument (best eQTL) with genotype vector E, run:\n\nllr2 = zeros(size(G,2))\npval = zeros(size(G,2))\nfor i in axes(G,2)\n  ng = length(unique(G[:,i]))\n  llr2[i] = BioFindr.realLLR_col(Yg, G[:,i])[1]\n  pval[i] = BioFindr.nullpval(llr2[i] , ns, ng, :link);\nend\n\nPut the results in a DataFrame together with the SNP IDs, and sort by ascending p-value:\n\ndp = DataFrame(:SNP =&gt; names(dg), :pvalue =&gt; pval)\nsort!(dp, :pvalue)\n\n3172×2 DataFrame3147 rows omitted\n\n\n\nRow\nSNP\npvalue\n\n\n\nString\nFloat64\n\n\n\n\n1\nrs9940094\n6.2972e-24\n\n\n2\nrs11283195\n0.000471103\n\n\n3\nrs879497\n0.000744385\n\n\n4\nrs4292287\n0.000918026\n\n\n5\nrs4085083\n0.00150058\n\n\n6\nrs229484\n0.00169764\n\n\n7\nrs2905214\n0.00197272\n\n\n8\nrs3794140\n0.00199086\n\n\n9\nrs112070238\n0.00209161\n\n\n10\nrs3828570\n0.00226225\n\n\n11\nrs34721481\n0.00231592\n\n\n12\nrs199607077\n0.0025415\n\n\n13\nrs1534973\n0.00295218\n\n\n⋮\n⋮\n⋮\n\n\n3161\nrs16981522\n0.995147\n\n\n3162\nrs10807157\n0.996345\n\n\n3163\nrs6687474\n0.996606\n\n\n3164\nrs11666334\n0.99727\n\n\n3165\nrs3735701\n0.997707\n\n\n3166\nrs3735701_1\n0.997707\n\n\n3167\nrs2184161\n0.997788\n\n\n3168\nrs68050381\n0.997995\n\n\n3169\nrs61876250\n0.998395\n\n\n3170\nrs75206071\n0.998975\n\n\n3171\nrs3747816\n0.999285\n\n\n3172\nrs4807542\n0.999328"
  },
  {
    "objectID": "installation.html",
    "href": "installation.html",
    "title": "Installation",
    "section": "",
    "text": "To install Julia, follow the Getting Started instructions."
  },
  {
    "objectID": "installation.html#install-julia",
    "href": "installation.html#install-julia",
    "title": "Installation",
    "section": "",
    "text": "To install Julia, follow the Getting Started instructions."
  },
  {
    "objectID": "installation.html#install-quarto-optional",
    "href": "installation.html#install-quarto-optional",
    "title": "Installation",
    "section": "Install Quarto (optional)",
    "text": "Install Quarto (optional)\nThese tutorials are written in Quarto. You don’t need Quarto if you only want to play with the notebooks, but you will need it if you want to reprodcue this website locally. See the Get Started page for installation instructions."
  },
  {
    "objectID": "installation.html#install-the-julia-extension-for-your-favourite-editoride-optional",
    "href": "installation.html#install-the-julia-extension-for-your-favourite-editoride-optional",
    "title": "Installation",
    "section": "Install the Julia extension for your favourite editor/IDE (optional)",
    "text": "Install the Julia extension for your favourite editor/IDE (optional)\nExtensions or plugings for VS Code, Emacs, and VIM are linked from the Julia homepage"
  },
  {
    "objectID": "installation.html#install-ijulia",
    "href": "installation.html#install-ijulia",
    "title": "Installation",
    "section": "Install IJulia",
    "text": "Install IJulia\nTo run the tutorial notebooks, you need IJulia. If you installed Quarto, follow these instructions to make sure Quarto can use IJulia to render documents with embedded Julia code."
  },
  {
    "objectID": "installation.html#install-biofindr.jl",
    "href": "installation.html#install-biofindr.jl",
    "title": "Installation",
    "section": "Install BioFindr.jl",
    "text": "Install BioFindr.jl\nBioFindr.jl is not yet a registered package. To install it, follow the instructions for adding unregistered packages. If you’re new to using Pkg, Julia’s package manager, see the Getting Started notes.\nOpen a Julia console and enter the Pkg REPL by pressing ] from the Julia REPL. Then:\npkg&gt; add https://github.com/tmichoel/BioFindr.jl\nor if you want to use the SSH-based git protocol:\npkg&gt; add \"git@github.com:tmichoel/BioFindr.jl.git\""
  },
  {
    "objectID": "installation.html#install-the-biofindrtutorials-repository",
    "href": "installation.html#install-the-biofindrtutorials-repository",
    "title": "Installation",
    "section": "Install the BioFindrTutorials repository",
    "text": "Install the BioFindrTutorials repository\nThe BioFindrTutorials repository uses DrWatson to make a reproducible scientific project named\n\nBioFindrTutorials\n\nTo (locally) reproduce this project, do the following:\n\nDownload this code base. Notice that raw data are not included in the git-history and need to be downloaded independently (see below).\nOpen a Julia console and do:\njulia&gt; using Pkg\njulia&gt; Pkg.add(\"DrWatson\") # install globally, for using `quickactivate`\njulia&gt; Pkg.activate(\"path/to/this/project\")\njulia&gt; Pkg.instantiate()\n\nThis will install all necessary packages for you to be able to run the scripts and everything should work out of the box, including correctly finding local paths.\nYou may notice that most scripts start with the commands:\nusing DrWatson\n@quickactivate \"BioFindrTutorials\"\nwhich auto-activate the project and enable local path handling from DrWatson."
  },
  {
    "objectID": "installation.html#download-and-preprocess-data",
    "href": "installation.html#download-and-preprocess-data",
    "title": "Installation",
    "section": "Download and preprocess data",
    "text": "Download and preprocess data\nThe scripts folder of the project contains a number of files named process_data_*. After downloading the initial data files (see below), you can then run the script to produce processed data files in the Apache Arrow format, which will be stored in the exp_pro folder.\n\nGEUVADIS data\n\nDownload preprocessed data files from the GEUVADIS study.\nSave all files in the folder exp_raw/findr-data-geuvadis.\nConcatenate the transcript files:\n$ cat dt1.csv.gz dt2.csv.gz &gt; dt.csv.gz\nUnzip all .gz files.\nCreate a folder exp_pro/findr-data-geuvadis (sorry, not very clean that this isn’t automated).\nRun the script process_data_findr-data-geuvadis.jl. You can either run it from the command line:\n$ julia scripts/process_data_findr-data-geuvadis.jl\nor open the file and run it interactively in your editor/IDE of choice. See Running Code for more information about how to this in VS Code.\nVerify that the directory exp_pro/findr-data-geuvadis contains matched .arrow files for each .csv file in the exp_raw/findr-data-geuvadis folder."
  },
  {
    "objectID": "installation.html#run-the-tutorials",
    "href": "installation.html#run-the-tutorials",
    "title": "Installation",
    "section": "Run the tutorials",
    "text": "Run the tutorials\nYou are now all set up to run the tutorials. You can either work directly with the *.qmd files in the website folder, or use the jupyter notebooks (*.ipynb files) in the notebooks folder. Make sure to have IJulia installed if using the latter option."
  },
  {
    "objectID": "coexpression.html",
    "href": "coexpression.html",
    "title": "Coexpression analysis",
    "section": "",
    "text": "While BioFindr.jl is developed primarily for causal inference from genomics and transcriptomics data, coexpression analysis of transcriptomics data alone is also possible. In coexpression analysis, pairwise correlation is used as a simple measure for the probability of two genes being functionally related either through direct or indirect regulation, or through coregulation by a third factor. In BioFindr.jl, significance of pairwise correlation is computed using a gene-specific background distribution, allowing for genes having different biological roles. For instance, it is known that many biological networks are scale-free, where a small number of so-called “hub genes” have a high number of interaction partners while most other genes only have few. In BioFindr.jl, this is accomodated by modelling the distribution of correlation values between a given gene \\(A\\) and all other genes \\(B\\) as a mixture distribution of real and null (random) correlations. The relative weight of each component reflects the prior probability of finding a non-null \\(B\\) gene for a given \\(A\\) gene, and is fitted for every \\(A\\) gene separately.\nWe will illustrate how to run coexpression analysis with BioFindr.jl using preprocessed data from the GEUVADIS study. See the installation instructions for the steps you need to take to reproduce this tutorial."
  },
  {
    "objectID": "coexpression.html#introduction",
    "href": "coexpression.html#introduction",
    "title": "Coexpression analysis",
    "section": "",
    "text": "While BioFindr.jl is developed primarily for causal inference from genomics and transcriptomics data, coexpression analysis of transcriptomics data alone is also possible. In coexpression analysis, pairwise correlation is used as a simple measure for the probability of two genes being functionally related either through direct or indirect regulation, or through coregulation by a third factor. In BioFindr.jl, significance of pairwise correlation is computed using a gene-specific background distribution, allowing for genes having different biological roles. For instance, it is known that many biological networks are scale-free, where a small number of so-called “hub genes” have a high number of interaction partners while most other genes only have few. In BioFindr.jl, this is accomodated by modelling the distribution of correlation values between a given gene \\(A\\) and all other genes \\(B\\) as a mixture distribution of real and null (random) correlations. The relative weight of each component reflects the prior probability of finding a non-null \\(B\\) gene for a given \\(A\\) gene, and is fitted for every \\(A\\) gene separately.\nWe will illustrate how to run coexpression analysis with BioFindr.jl using preprocessed data from the GEUVADIS study. See the installation instructions for the steps you need to take to reproduce this tutorial."
  },
  {
    "objectID": "coexpression.html#set-up-the-environment",
    "href": "coexpression.html#set-up-the-environment",
    "title": "Coexpression analysis",
    "section": "Set up the environment",
    "text": "Set up the environment\nWe begin by setting up the environment and loading some necessary packages.\n\nusing DrWatson\nquickactivate(@__DIR__)\n\nusing DataFrames\nusing Arrow\nusing Markdown\n\nusing BioFindr"
  },
  {
    "objectID": "coexpression.html#load-expression-data",
    "href": "coexpression.html#load-expression-data",
    "title": "Coexpression analysis",
    "section": "Load expression data",
    "text": "Load expression data\nBioFindr.jl expects that expression data are stored in a DataFrame where columns correspond to variables (genes) and rows to samples. An expression DataFrame should not contain any other columns (e.g. gene annotation) than gene expression columns, and gene expression data should be stored as floating-point numbers. Internally, BioFindr.jl operates on matrices, and if you have an expression DataFrame df, then Matrix(df) should return a matrix of floats.\nAt the moment, BioFindr.jl does not support count-based expression data being provided as a DataFrame of integers. This is not an intrinsic limitation of the method, but simply to distinguish expression data from integer-valued genotype data. Future versions will remove this limitation by supporting scientific types.\nThis tutorial uses two tables of expression data from the same set of samples, one for mRNA expression data called dt, and one for microRNA (miRNA) expression data called dm:\n\ndt = DataFrame(Arrow.Table(datadir(\"exp_pro\",\"findr-data-geuvadis\", \"dt.arrow\")));\ndm = DataFrame(Arrow.Table(datadir(\"exp_pro\",\"findr-data-geuvadis\", \"dm.arrow\")));\n\n\n\nThe mRNA data has expression data for 23722 genes in 360 samples, while miRNA data is available for 674 miRNAs in the same 360 samples.\n\n\nWe can confirm that the data frames are of the right type:\n\n[typeof(Matrix(dt)) typeof(Matrix(dm))]\n\n1×2 Matrix{DataType}:\n Matrix{Float64}  Matrix{Float64}"
  },
  {
    "objectID": "coexpression.html#run-biofindr.jl",
    "href": "coexpression.html#run-biofindr.jl",
    "title": "Coexpression analysis",
    "section": "Run BioFindr.jl",
    "text": "Run BioFindr.jl\n\nAll-vs-all coexpression analysis\nThe simplest type of coexpression analysis tests for non-zero correlation among all possible pairs in a gene expression dataset. Let’s do this for the miRNA data:\n\ndP_mir_all = findr(dm, FDR=0.05)\n\n28378×4 DataFrame28353 rows omitted\n\n\n\nRow\nSource\nTarget\nProbability\nqvalue\n\n\n\nString\nString\nFloat64\nFloat64\n\n\n\n\n1\nhsa-miR-574-3p\nhsa-miR-574-5p\n1.0\n0.0\n\n\n2\nhsa-miR-4482-1-3p\nhsa-miR-1304-3p\n1.0\n0.0\n\n\n3\nhsa-miR-3667-5p\nhsa-miR-3667-3p\n1.0\n0.0\n\n\n4\nhsa-miR-550a-2-5p\nhsa-miR-550a-2-3p\n1.0\n0.0\n\n\n5\nhsa-miR-550a-2-5p\nhsa-miR-550a-3-5p\n1.0\n0.0\n\n\n6\nhsa-miR-3130-2-5p\nhsa-miR-3130-1-5p\n1.0\n0.0\n\n\n7\nhsa-let-7b-5p\nhsa-let-7b-3p\n1.0\n0.0\n\n\n8\nhsa-miR-96-5p\nhsa-miR-182-5p\n1.0\n0.0\n\n\n9\nhsa-miR-96-5p\nhsa-miR-1271-5p\n1.0\n0.0\n\n\n10\nhsa-miR-3667-3p\nhsa-miR-3667-5p\n1.0\n0.0\n\n\n11\nhsa-miR-181c-5p\nhsa-miR-181c-3p\n1.0\n0.0\n\n\n12\nhsa-miR-181c-5p\nhsa-miR-181d-5p\n1.0\n0.0\n\n\n13\nhsa-miR-335-5p\nhsa-miR-335-3p\n1.0\n0.0\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n28367\nhsa-miR-410-3p\nhsa-miR-7-3-5p\n0.84803\n0.0499585\n\n\n28368\nhsa-miR-152-3p\nhsa-miR-181a-1-5p\n0.848014\n0.0499621\n\n\n28369\nhsa-let-7f-2-3p\nhsa-miR-4446-3p\n0.848008\n0.0499657\n\n\n28370\nhsa-miR-181a-1-3p\nhsa-miR-99b-5p\n0.847993\n0.0499693\n\n\n28371\nhsa-miR-330-5p\nhsa-miR-296-5p\n0.84799\n0.0499729\n\n\n28372\nhsa-miR-1307-5p\nhsa-miR-32-3p\n0.847985\n0.0499765\n\n\n28373\nhsa-miR-221-3p\nhsa-miR-424-5p\n0.847972\n0.0499801\n\n\n28374\nhsa-miR-27b-5p\nhsa-miR-4424-3p\n0.847958\n0.0499837\n\n\n28375\nhsa-miR-629-5p\nhsa-miR-5096-5p\n0.847952\n0.0499873\n\n\n28376\nhsa-miR-181c-3p\nhsa-miR-374b-5p\n0.847946\n0.0499909\n\n\n28377\nhsa-miR-3688-2-3p\nhsa-miR-1260b-5p\n0.847943\n0.0499945\n\n\n28378\nhsa-let-7d-5p\nhsa-miR-142-3p\n0.847937\n0.0499981\n\n\n\n\n\n\nBioFindr computes a posterior probability of non-zero correlation for every Source and Target gene pair. By default the output is sorted by decreasing Probability and self-interactions are excluded. The optional parameter FDR can be used to limit the output to the set of pairs that has a global false discovery rate (FDR) less than a desired value. The qvalue column in the output can be used for further filtering of the output. Say you ran findr with an FRD threshold of 5% as above. If you now want to restrict the output to an FDR threshold of 1%, you can do:\n\nfilter!(row -&gt; row.qvalue &lt;= 0.01, dP_mir_all)\n\n14556×4 DataFrame14531 rows omitted\n\n\n\nRow\nSource\nTarget\nProbability\nqvalue\n\n\n\nString\nString\nFloat64\nFloat64\n\n\n\n\n1\nhsa-miR-574-3p\nhsa-miR-574-5p\n1.0\n0.0\n\n\n2\nhsa-miR-4482-1-3p\nhsa-miR-1304-3p\n1.0\n0.0\n\n\n3\nhsa-miR-3667-5p\nhsa-miR-3667-3p\n1.0\n0.0\n\n\n4\nhsa-miR-550a-2-5p\nhsa-miR-550a-2-3p\n1.0\n0.0\n\n\n5\nhsa-miR-550a-2-5p\nhsa-miR-550a-3-5p\n1.0\n0.0\n\n\n6\nhsa-miR-3130-2-5p\nhsa-miR-3130-1-5p\n1.0\n0.0\n\n\n7\nhsa-let-7b-5p\nhsa-let-7b-3p\n1.0\n0.0\n\n\n8\nhsa-miR-96-5p\nhsa-miR-182-5p\n1.0\n0.0\n\n\n9\nhsa-miR-96-5p\nhsa-miR-1271-5p\n1.0\n0.0\n\n\n10\nhsa-miR-3667-3p\nhsa-miR-3667-5p\n1.0\n0.0\n\n\n11\nhsa-miR-181c-5p\nhsa-miR-181c-3p\n1.0\n0.0\n\n\n12\nhsa-miR-181c-5p\nhsa-miR-181d-5p\n1.0\n0.0\n\n\n13\nhsa-miR-335-5p\nhsa-miR-335-3p\n1.0\n0.0\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n14545\nhsa-miR-4662a-5p\nhsa-miR-486-5p\n0.961667\n0.0099779\n\n\n14546\nhsa-miR-181b-1-3p\nhsa-miR-3609-3p\n0.961654\n0.00997985\n\n\n14547\nhsa-miR-23a-5p\nhsa-miR-150-5p\n0.961633\n0.0099818\n\n\n14548\nhsa-miR-500a-3p\nhsa-miR-138-1-3p\n0.961624\n0.00998375\n\n\n14549\nhsa-miR-425-3p\nhsa-miR-200c-3p\n0.961621\n0.00998571\n\n\n14550\nhsa-miR-125a-5p\nhsa-miR-140-3p\n0.961608\n0.00998766\n\n\n14551\nhsa-miR-342-5p\nhsa-miR-335-5p\n0.961607\n0.00998961\n\n\n14552\nhsa-miR-3615-3p\nhsa-miR-744-5p\n0.9616\n0.00999156\n\n\n14553\nhsa-miR-320d-1-3p\nhsa-miR-365a-5p\n0.961596\n0.00999351\n\n\n14554\nhsa-miR-23a-5p\nhsa-miR-425-5p\n0.961593\n0.00999547\n\n\n14555\nhsa-miR-26b-3p\nhsa-miR-4687-3p\n0.961592\n0.00999742\n\n\n14556\nhsa-miR-589-5p\nhsa-miR-644b-3p\n0.96159\n0.00999937\n\n\n\n\n\n\nNote that the filter! command modifies the input DataFrame in-place, that is, the rows not matching the selection criteria are deleted. Use filter to return a new DataFrame with the selected rows.\nFinally, remember that the output of coexpression analysis in BioFindr is not symmetric, that is\n\\[\nP(Source, Target) \\neq P(Target, Source)\n\\]\nThis is because the posterior probabilities are estimated using a Source-specific background distribution, accounting for the fact that different genes may have a different number of non-null interaction partners a priori. See the Findr paper for details.\n\n\nBipartite coexpression analysis\nSince BioFindr’s posterior probabilities are Source gene-specific, we may be interested in computing probabilities only for a subset of Source genes, or using different Source and Target gene sets.\nAs an example of the first scenario, assume we are interested in finding microRNAs that are significantly correlated with microRNAs from the Mir-200 family. First find the Mir-200 microRNAs:\n\nmir200 = names(dm)[startswith.(names(dm),\"hsa-miR-200\")]\n\n3-element Vector{String}:\n \"hsa-miR-200b-3p\"\n \"hsa-miR-200a-3p\"\n \"hsa-miR-200c-3p\"\n\n\nThen run\n\ndP_mir200_mir = findr(dm, colnames=mir200, FDR=0.01)\n\n47×4 DataFrame22 rows omitted\n\n\n\nRow\nSource\nTarget\nProbability\nqvalue\n\n\n\nString\nString\nFloat64\nFloat64\n\n\n\n\n1\nhsa-miR-200a-3p\nhsa-miR-200b-3p\n1.0\n1.39181e-9\n\n\n2\nhsa-miR-200b-3p\nhsa-miR-200a-3p\n1.0\n1.55254e-9\n\n\n3\nhsa-miR-200c-3p\nhsa-miR-93-5p\n0.999998\n5.68454e-7\n\n\n4\nhsa-miR-200c-3p\nhsa-miR-140-3p\n0.999984\n4.44472e-6\n\n\n5\nhsa-miR-200b-3p\nhsa-miR-429-3p\n0.999918\n1.99874e-5\n\n\n6\nhsa-miR-200c-3p\nhsa-miR-16-1-5p\n0.999792\n5.13862e-5\n\n\n7\nhsa-miR-200c-3p\nhsa-miR-664-3p\n0.999784\n7.49279e-5\n\n\n8\nhsa-miR-200c-3p\nhsa-miR-17-5p\n0.999641\n0.000110395\n\n\n9\nhsa-miR-200b-3p\nhsa-miR-582-3p\n0.999246\n0.00018188\n\n\n10\nhsa-miR-200c-3p\nhsa-miR-769-5p\n0.999242\n0.000239459\n\n\n11\nhsa-miR-200c-3p\nhsa-miR-130b-5p\n0.999139\n0.000295921\n\n\n12\nhsa-miR-200c-3p\nhsa-miR-425-5p\n0.999052\n0.000350225\n\n\n13\nhsa-miR-200c-3p\nhsa-miR-103a-2-3p\n0.999001\n0.000400161\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n36\nhsa-miR-200b-3p\nhsa-miR-769-3p\n0.983749\n0.00628075\n\n\n37\nhsa-miR-200c-3p\nhsa-miR-378a-3p\n0.983227\n0.00656431\n\n\n38\nhsa-miR-200b-3p\nhsa-miR-26b-5p\n0.981109\n0.00688869\n\n\n39\nhsa-miR-200c-3p\nhsa-miR-619-5p\n0.980948\n0.00720056\n\n\n40\nhsa-miR-200c-3p\nhsa-miR-500a-5p\n0.97978\n0.00752605\n\n\n41\nhsa-miR-200c-3p\nhsa-miR-4677-3p\n0.979595\n0.00784016\n\n\n42\nhsa-miR-200b-3p\nhsa-miR-328-3p\n0.979019\n0.00815303\n\n\n43\nhsa-miR-200b-3p\nhsa-miR-9-1-5p\n0.978721\n0.00845829\n\n\n44\nhsa-miR-200c-3p\nhsa-miR-141-5p\n0.978487\n0.00875499\n\n\n45\nhsa-miR-200c-3p\nhsa-miR-30e-3p\n0.977855\n0.00905255\n\n\n46\nhsa-miR-200a-3p\nhsa-miR-26b-5p\n0.976313\n0.0093707\n\n\n47\nhsa-miR-200c-3p\nhsa-miR-25-3p\n0.971038\n0.00978752\n\n\n\n\n\n\nThe parameter colnames must be a vector of strings containing a subset of variable names of the input DataFrame dm to be used as Source genes.\nAs an example of the second scenario, we may be interested in finding genes that are significantly correlated with all or a subset of microRNAs:\n\ndP_mir_mrna = findr(dt, dm, FDR=0.01)\n\n56268×4 DataFrame56243 rows omitted\n\n\n\nRow\nSource\nTarget\nProbability\nqvalue\n\n\n\nString\nString\nFloat64\nFloat64\n\n\n\n\n1\nhsa-miR-3150b-3p\nENSG00000245080.3\n1.0\n0.0\n\n\n2\nhsa-let-7b-5p\nENSG00000197182.8\n1.0\n0.0\n\n\n3\nhsa-let-7b-5p\nENSG00000241990.1\n1.0\n0.0\n\n\n4\nhsa-miR-335-5p\nENSG00000106484.8\n1.0\n0.0\n\n\n5\nhsa-miR-335-5p\nENSG00000128510.5\n1.0\n0.0\n\n\n6\nhsa-miR-335-5p\nENSG00000220884.2\n1.0\n0.0\n\n\n7\nhsa-miR-618-5p\nENSG00000111052.3\n1.0\n0.0\n\n\n8\nhsa-miR-335-3p\nENSG00000106484.8\n1.0\n0.0\n\n\n9\nhsa-miR-335-3p\nENSG00000128510.5\n1.0\n0.0\n\n\n10\nhsa-miR-335-3p\nENSG00000220884.2\n1.0\n0.0\n\n\n11\nhsa-let-7b-3p\nENSG00000241990.1\n1.0\n0.0\n\n\n12\nhsa-miR-138-1-3p\nENSG00000261786.1\n1.0\n0.0\n\n\n13\nhsa-miR-138-1-5p\nENSG00000261786.1\n1.0\n0.0\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n56257\nhsa-miR-3909-3p\nENSG00000143028.7\n0.973468\n0.00999676\n\n\n56258\nhsa-miR-193b-3p\nENSG00000198833.5\n0.973467\n0.00999706\n\n\n56259\nhsa-miR-148a-3p\nENSG00000112697.10\n0.973467\n0.00999735\n\n\n56260\nhsa-miR-425-3p\nENSG00000072195.9\n0.973467\n0.00999764\n\n\n56261\nhsa-miR-210-5p\nENSG00000013503.4\n0.973466\n0.00999794\n\n\n56262\nhsa-miR-625-5p\nENSG00000214121.3\n0.973465\n0.00999823\n\n\n56263\nhsa-miR-1301-3p\nENSG00000231752.1\n0.973465\n0.00999853\n\n\n56264\nhsa-miR-582-5p\nENSG00000231752.1\n0.973463\n0.00999882\n\n\n56265\nhsa-miR-132-3p\nENSG00000158406.2\n0.973463\n0.00999911\n\n\n56266\nhsa-miR-196a-2-5p\nENSG00000229446.1\n0.973462\n0.00999941\n\n\n56267\nhsa-miR-29b-1-5p\nENSG00000188010.8\n0.973461\n0.0099997\n\n\n56268\nhsa-miR-125a-5p\nENSG00000047932.9\n0.973461\n0.01\n\n\n\n\n\n\nNote the order of the arguments: here we tested all microRNAs as \\(A\\) or Source genes (dm argument) against all mRNA transcripts as \\(B\\) or Target genes (dt argument), that is, background distributions are fitted for each microRNA (column of dm) from the log-likelihood ratios for all 23,722 mRNAs (columns of dt)."
  },
  {
    "objectID": "association.html",
    "href": "association.html",
    "title": "Association analysis",
    "section": "",
    "text": "While BioFindr.jl is developed primarily for causal inference from genomics and transcriptomics data, association analysis between genomics and transcriptomics data is also possible. In association analysis, genetic effects on the transcriptome are measured by testing if genes are differentially expressed in different groups of samples defined by the genotype of a genetic variant of interest. In BioFindr.jl, significance of association is computed using a categorical model and a variant-specific background distribution. Similar to what was done in the coexpression analysis tutorial, this is achieved by modelling the distribution of association values between a given variant \\(A\\) and all genes \\(B\\) as a mixture distribution of real and null (random) associations. The relative weight of each component then reflects the prior probability of finding a non-null \\(B\\) gene for a given variant \\(A\\), and is fitted for every \\(A\\) separately.\nWe will illustrate how to run association analysis with BioFindr.jl using preprocessed data from the GEUVADIS study. See the installation instructions for the steps you need to take to reproduce this tutorial."
  },
  {
    "objectID": "association.html#introduction",
    "href": "association.html#introduction",
    "title": "Association analysis",
    "section": "",
    "text": "While BioFindr.jl is developed primarily for causal inference from genomics and transcriptomics data, association analysis between genomics and transcriptomics data is also possible. In association analysis, genetic effects on the transcriptome are measured by testing if genes are differentially expressed in different groups of samples defined by the genotype of a genetic variant of interest. In BioFindr.jl, significance of association is computed using a categorical model and a variant-specific background distribution. Similar to what was done in the coexpression analysis tutorial, this is achieved by modelling the distribution of association values between a given variant \\(A\\) and all genes \\(B\\) as a mixture distribution of real and null (random) associations. The relative weight of each component then reflects the prior probability of finding a non-null \\(B\\) gene for a given variant \\(A\\), and is fitted for every \\(A\\) separately.\nWe will illustrate how to run association analysis with BioFindr.jl using preprocessed data from the GEUVADIS study. See the installation instructions for the steps you need to take to reproduce this tutorial."
  },
  {
    "objectID": "association.html#set-up-the-environment",
    "href": "association.html#set-up-the-environment",
    "title": "Association analysis",
    "section": "Set up the environment",
    "text": "Set up the environment\nWe begin by setting up the environment and loading some necessary packages.\n\nusing DrWatson\nquickactivate(@__DIR__)\n\nusing DataFrames\nusing Arrow\n\nusing BioFindr\n\n[ Info: Precompiling BioFindr [77580646-997d-4218-a3cc-42097ecd1c68]"
  },
  {
    "objectID": "association.html#load-data",
    "href": "association.html#load-data",
    "title": "Association analysis",
    "section": "Load data",
    "text": "Load data\n\nExpression data\nBioFindr.jl expects that expression data are stored as floating-point numbers in a DataFrame where columns correspond to variables (genes) and rows to samples, see the coexpression analysis tutorial for more details.\nThis tutorial uses two tables of expression data from the same set of samples, one for mRNA expression data called dt, and one for microRNA (miRNA) expression data called dm:\n\ndt = DataFrame(Arrow.Table(datadir(\"exp_pro\",\"findr-data-geuvadis\", \"dt.arrow\")));\ndm = DataFrame(Arrow.Table(datadir(\"exp_pro\",\"findr-data-geuvadis\", \"dm.arrow\")));\n\n\n\nGenotype data\nBioFindr.jl expects that genotype data are stored as integer numbers in a DataFrame where columns correspond to variables (genetic variants) and rows to samples. Since BioFindr.jl uses a categorical association model, it does not matter how different genotypes (e.g. heterozygous vs. homozygous) are encoded as integers. Future versions will support scientific types for representing genotype data.\nThis tutorial uses two tables of genotype data from the same set of samples as the expression data, one with genotypes for mRNA eQTLs called dgt, and one for microRNA (miRNA) eQTLs called dgm:\n\ndgt = DataFrame(Arrow.Table(datadir(\"exp_pro\",\"findr-data-geuvadis\", \"dgt.arrow\")));\ndgm = DataFrame(Arrow.Table(datadir(\"exp_pro\",\"findr-data-geuvadis\", \"dgm.arrow\")));"
  },
  {
    "objectID": "association.html#run-biofindr.jl",
    "href": "association.html#run-biofindr.jl",
    "title": "Association analysis",
    "section": "Run BioFindr.jl",
    "text": "Run BioFindr.jl\nAssume we are interested in identifying mRNA genes whose expression levels are associated to microRNA eQTLs. We run:\n\ndP = findr(dt, dgm, FDR=0.05)\n\n245×4 DataFrame220 rows omitted\n\n\n\nRow\nSource\nTarget\nProbability\nqvalue\n\n\n\nString\nString\nFloat64\nFloat64\n\n\n\n\n1\nrs71532525\nENSG00000229358.2\n1.0\n0.0\n\n\n2\nrs6987762\nENSG00000245080.3\n1.0\n0.0\n\n\n3\nrs3807344\nENSG00000128510.5\n1.0\n0.0\n\n\n4\nrs6462386\nENSG00000229358.2\n1.0\n0.0\n\n\n5\nrs3807344_1\nENSG00000128510.5\n1.0\n0.0\n\n\n6\nrs9616333\nENSG00000212939.2\n1.0\n4.48436e-11\n\n\n7\nrs8141807\nENSG00000212939.2\n1.0\n2.89877e-10\n\n\n8\nrs5743580\nENSG00000174130.7\n1.0\n3.65605e-9\n\n\n9\nrs73236618\nENSG00000174130.7\n1.0\n1.30597e-8\n\n\n10\nrs5743580\nENSG00000174125.3\n1.0\n2.22497e-8\n\n\n11\nrs73236618\nENSG00000174125.3\n1.0\n4.03598e-8\n\n\n12\nrs6462386\nENSG00000237004.2\n1.0\n5.69644e-8\n\n\n13\nrs71532525\nENSG00000237004.2\n1.0\n8.03159e-8\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n234\nrs768533\nENSG00000177239.9\n0.904976\n0.0477775\n\n\n235\nrs768533_1\nENSG00000177239.9\n0.904976\n0.0479786\n\n\n236\nrs768533\nENSG00000237172.3\n0.904966\n0.048178\n\n\n237\nrs768533_1\nENSG00000237172.3\n0.904966\n0.0483757\n\n\n238\nindel:3I_20_62542026\nENSG00000182718.11\n0.903654\n0.0485772\n\n\n239\nrs4926170\nENSG00000241129.2\n0.90332\n0.0487785\n\n\n240\nrs80283015\nENSG00000145349.12\n0.903025\n0.0489793\n\n\n241\nrs768533\nENSG00000228976.1\n0.902361\n0.0491812\n\n\n242\nrs768533_1\nENSG00000228976.1\n0.902361\n0.0493815\n\n\n243\nrs80283015\nENSG00000088992.13\n0.902234\n0.0495806\n\n\n244\nrs30221\nENSG00000249719.1\n0.902213\n0.0497781\n\n\n245\nrs80283015\nENSG00000231249.1\n0.901757\n0.049976\n\n\n\n\n\n\nBioFindr computes a posterior probability of non-zero association for every Source variant (columns of dgm) and Target gene (columns of dt). By default the output is sorted by decreasing Probability. The optional parameter FDR can be used to limit the output to the set of pairs that has a global false discovery rate (FDR) less than a desired value (here set to 5%). The qvalue column in the output can be used for further filtering of the output, see the coexpression analysis tutorial for further details.\nNote the order of the arguments. The first argument dt is the Target DataFrame, and the second argument the Source DataFrame."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "causal-inference.html",
    "href": "causal-inference.html",
    "title": "Causal inference",
    "section": "",
    "text": "The primary use of BioFindr.jl is for causal inference from genomics and transcriptomics data. In causal inference, cis-acting eQTLs are used as causal anchors or instrumental variables to orient the direction of causality between coexpressed genes, see the Findr paper for more details. As in coexpression analysis and association analysis, the significance of a causal effect is computed using a gene-specific background distribution. This is again achieved by modelling the distribution of test statistics between a given gene \\(A\\) and all other genes \\(B\\) as a mixture distribution of real and null (random) correlations. The relative weight of each component reflects the prior probability of finding a non-null \\(B\\) gene for a given \\(A\\) gene, and is fitted for every \\(A\\) gene separately.\nUnlike in coexpression analysis and association analysis, causal inference cannot be performed using a single statistical test, but requires the combination of multiple tests. In BioFindr.jl, six likelihood ratio tests are implemented, which can be combined in multiple ways for causal inference. Tests are combined by addition or mulitplication of the posterior probabilities of individial tests, an approach first proposed in this paper.\nWe will illustrate how to run causal inference with BioFindr.jl using preprocessed data from the GEUVADIS study. See the installation instructions for the steps you need to take to reproduce this tutorial."
  },
  {
    "objectID": "causal-inference.html#introduction",
    "href": "causal-inference.html#introduction",
    "title": "Causal inference",
    "section": "",
    "text": "The primary use of BioFindr.jl is for causal inference from genomics and transcriptomics data. In causal inference, cis-acting eQTLs are used as causal anchors or instrumental variables to orient the direction of causality between coexpressed genes, see the Findr paper for more details. As in coexpression analysis and association analysis, the significance of a causal effect is computed using a gene-specific background distribution. This is again achieved by modelling the distribution of test statistics between a given gene \\(A\\) and all other genes \\(B\\) as a mixture distribution of real and null (random) correlations. The relative weight of each component reflects the prior probability of finding a non-null \\(B\\) gene for a given \\(A\\) gene, and is fitted for every \\(A\\) gene separately.\nUnlike in coexpression analysis and association analysis, causal inference cannot be performed using a single statistical test, but requires the combination of multiple tests. In BioFindr.jl, six likelihood ratio tests are implemented, which can be combined in multiple ways for causal inference. Tests are combined by addition or mulitplication of the posterior probabilities of individial tests, an approach first proposed in this paper.\nWe will illustrate how to run causal inference with BioFindr.jl using preprocessed data from the GEUVADIS study. See the installation instructions for the steps you need to take to reproduce this tutorial."
  },
  {
    "objectID": "causal-inference.html#set-up-the-environment",
    "href": "causal-inference.html#set-up-the-environment",
    "title": "Causal inference",
    "section": "Set up the environment",
    "text": "Set up the environment\n\nusing DrWatson\nquickactivate(@__DIR__)\n\nusing DataFrames\nusing Arrow\n\nusing BioFindr"
  },
  {
    "objectID": "causal-inference.html#load-data",
    "href": "causal-inference.html#load-data",
    "title": "Causal inference",
    "section": "Load data",
    "text": "Load data\n\nExpression data\nBioFindr.jl expects that expression data are stored as floating-point numbers in a DataFrame where columns correspond to variables (genes) and rows to samples, see the coexpression analysis tutorial for more details.\nThis tutorial uses two tables of expression data from the same set of samples, one for mRNA expression data called dt, and one for microRNA (miRNA) expression data called dm:\n\ndt = DataFrame(Arrow.Table(datadir(\"exp_pro\",\"findr-data-geuvadis\", \"dt.arrow\")));\ndm = DataFrame(Arrow.Table(datadir(\"exp_pro\",\"findr-data-geuvadis\", \"dm.arrow\")));\n\n\n\nGenotype data\nBioFindr.jl expects that genotype data are stored as integer numbers in a DataFrame where columns correspond to variables (genetic variants) and rows to samples. BioFindr.jl uses a categorical model to associate genetic variation to variation in gene expression, hence how different genotypes (e.g. heterozygous vs. homozygous) are encoded as integers does not matter. Future versions will support scientific types for representing genotype data.\nThis tutorial uses two tables of expression data from the same set of samples, one with genotypes for mRNA eQTLs called dgt, and one for microRNA (miRNA) eQTLs called dgm:\n\ndgt = DataFrame(Arrow.Table(datadir(\"exp_pro\",\"findr-data-geuvadis\", \"dgt.arrow\")));\ndgm = DataFrame(Arrow.Table(datadir(\"exp_pro\",\"findr-data-geuvadis\", \"dgm.arrow\")));\n\n\n\neQTL mapping data\nThe preprocessed GEUVADIS data has been organized such that each column of the genotype data is the strongest eQTLs for the corresponding column in the matching expression data. Usually however, eQTL mapping data will be available in the form of a table with variant IDs, gene IDs, and various eQTL associaion statistics (see the original GEUVADIS file for an example). BioFindr.jl expects that such a table is read into a DataFrame, and that only the best (most strongly associated) eQTL is kept for each gene, that is, genes appear only once in the eQTL mapping table. Let’s artificially create such tables for our data:\n\ndpt = DataFrame(SNP_ID = names(dgt), GENE_ID=names(dt)[1:ncol(dgt)]);\ndpm = DataFrame(SNP_ID = names(dgm), GENE_ID=names(dm)[1:ncol(dgm)]);"
  },
  {
    "objectID": "causal-inference.html#run-biofindr.jl",
    "href": "causal-inference.html#run-biofindr.jl",
    "title": "Causal inference",
    "section": "Run BioFindr.jl",
    "text": "Run BioFindr.jl\n\nSubset-to-all causal inference\nIn the most common scenario, we have a dataset of gene expression values, with significant cis-eQTL instruments for a subset of genes (“eGenes”). We can then infer causal interactions from the eGenes to all other genes (including other eGenes). For instance, to infer causal microRNA \\(\\to\\) microRNA interaction, run:\n\ndP = findr(dm, dgm, dpm; FDR=0.1)\n\n41×4 DataFrame16 rows omitted\n\n\n\nRow\nSource\nTarget\nProbability\nqvalue\n\n\n\nString\nString\nFloat64\nFloat64\n\n\n\n\n1\nhsa-miR-550a-2-5p\nhsa-miR-550a-3-5p\n1.0\n0.0\n\n\n2\nhsa-miR-96-5p\nhsa-miR-182-5p\n1.0\n4.81948e-13\n\n\n3\nhsa-miR-550a-2-5p\nhsa-miR-550a-2-3p\n1.0\n2.53784e-11\n\n\n4\nhsa-miR-3130-1-5p\nhsa-miR-3130-2-5p\n1.0\n1.04578e-10\n\n\n5\nhsa-miR-550a-2-3p\nhsa-miR-550a-3-5p\n1.0\n1.5224e-10\n\n\n6\nhsa-miR-550a-2-3p\nhsa-miR-550a-2-5p\n1.0\n4.87261e-10\n\n\n7\nhsa-miR-183-5p\nhsa-miR-182-5p\n1.0\n5.45614e-9\n\n\n8\nhsa-miR-30a-3p\nhsa-miR-30a-5p\n1.0\n4.29665e-8\n\n\n9\nhsa-miR-574-5p\nhsa-miR-574-3p\n0.999994\n6.6706e-7\n\n\n10\nhsa-miR-335-5p\nhsa-miR-335-3p\n0.999991\n1.51939e-6\n\n\n11\nhsa-miR-30a-5p\nhsa-miR-30a-3p\n0.999986\n2.61404e-6\n\n\n12\nhsa-miR-200a-3p\nhsa-miR-200b-3p\n0.999981\n3.95989e-6\n\n\n13\nhsa-miR-2116-5p\nhsa-miR-2116-3p\n0.999885\n1.24838e-5\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n30\nhsa-miR-589-5p\nhsa-miR-128-2-3p\n0.800821\n0.0406675\n\n\n31\nhsa-miR-3176-3p\nhsa-miR-19a-3p\n0.797987\n0.0458722\n\n\n32\nhsa-miR-193b-3p\nhsa-miR-320b-2-3p\n0.766986\n0.0517204\n\n\n33\nhsa-miR-193b-3p\nhsa-miR-615-3p\n0.760159\n0.057421\n\n\n34\nhsa-miR-193b-3p\nhsa-miR-3944-3p\n0.760018\n0.0627904\n\n\n35\nhsa-miR-339-5p\nhsa-miR-339-3p\n0.746762\n0.0682318\n\n\n36\nhsa-miR-193b-3p\nhsa-miR-320b-1-3p\n0.740647\n0.0735407\n\n\n37\nhsa-let-7b-5p\nhsa-let-7b-3p\n0.734285\n0.0787346\n\n\n38\nhsa-miR-3176-3p\nhsa-miR-3181-5p\n0.732608\n0.0836993\n\n\n39\nhsa-miR-1304-3p\nhsa-miR-548ar-5p\n0.729668\n0.0884848\n\n\n40\nhsa-miR-1307-5p\nhsa-miR-1307-3p\n0.713498\n0.0934352\n\n\n41\nhsa-miR-3176-3p\nhsa-miR-24-1-3p\n0.701225\n0.0984435\n\n\n\n\n\n\nBioFindr computes a posterior probability of a non-zero causal interaction for every pair pf Source and Target genes (columns of dm). The possible Source genes are the eGenes, the subset of genes with cis-eQTLs (columns of dgm), as defined by the eQTL-to-gene mapping in dpm.\nBy default the output is sorted by decreasing Probability. The optional parameter FDR can be used to limit the output to the set of pairs that has a global false discovery rate (FDR) less than a desired value (here set to 10%). The qvalue column in the output can be used for further filtering of the output, see the coexpression analysis tutorial for more details.\nNote the order of input arguments: first dm, the expression data, then dgm, the genotype data, and then dpm, the eQTL mapping of variants to eGenes.\nBy default, BioFindr assumes that the first column of dpm is a list of variant names that can be found in the column names of dgm, and that the second column of dpm is a list of gene names that can be found in the column names of dm:\n\ndpm\n\n55×2 DataFrame30 rows omitted\n\n\n\nRow\nSNP_ID\nGENE_ID\n\n\n\nString\nString\n\n\n\n\n1\nrs201731283\nhsa-miR-4804-5p\n\n\n2\nrs73933236\nhsa-miR-641-5p\n\n\n3\nrs17269517\nhsa-miR-2116-3p\n\n\n4\nrs2273626\nhsa-miR-4707-3p\n\n\n5\nrs174559\nhsa-miR-1908-5p\n\n\n6\nrs7095504\nhsa-miR-2110-5p\n\n\n7\nrs2583391\nhsa-miR-1255a-5p\n\n\n8\nrs5743580\nhsa-miR-574-3p\n\n\n9\nrs143756085\nhsa-miR-1270-2-5p\n\n\n10\nrs17269517_1\nhsa-miR-2116-5p\n\n\n11\nrs11191968\nhsa-miR-4482-1-3p\n\n\n12\nrs8141807\nhsa-miR-3667-5p\n\n\n13\nrs648571\nhsa-miR-5680-3p\n\n\n⋮\n⋮\n⋮\n\n\n44\nrs1378942\nhsa-miR-4513-5p\n\n\n45\nrs768533_1\nhsa-miR-3130-1-5p\n\n\n46\nrs78562044\nhsa-miR-30a-3p\n\n\n47\nrs35671783\nhsa-miR-1304-3p\n\n\n48\nrs2537621\nhsa-miR-589-5p\n\n\n49\nrs6462386\nhsa-miR-550a-2-3p\n\n\n50\nrs745666\nhsa-miR-3615-3p\n\n\n51\nrs817478\nhsa-miR-4423-5p\n\n\n52\nrs73054305\nhsa-miR-642a-5p\n\n\n53\nrs3807344_1\nhsa-miR-335-3p\n\n\n54\nrs4393680\nhsa-miR-4741-3p\n\n\n55\nrs2583392\nhsa-miR-1255a-3p\n\n\n\n\n\n\nIf your eQTL mapping DataFrame has the relevant columns in a different place, you need to use the optional arguments colX (for the gene expression IDs) and colG (for the eQTL genotype IDs) to specify either the relevant columns index or name:\n\ndP = findr(dm, dgm, dpm; colX=2, colG=1, FDR=0.1);\n\nor\n\ndP = findr(dm, dgm, dpm; colX=\"GENE_ID\", colG=\"SNP_ID\", FDR=0.1);\n\nAny other columns in the eQTL mapping DataFrame (such as association summary statistics) are ignored.\n\n\nBipartite causal inference\nIn some applications, we have multiple omics datasets from the same samples, and may be interested in causal inference from one set of variables to another one. In the GEUVADIS study for instance, we may be interested in inferring causal interactions between microRNAs and target genes. To infer interactions from microRNAs to mRNAs, run:\n\ndP = findr(dt, dm, dgm, dpm; FDR=0.1)\n\n36×4 DataFrame11 rows omitted\n\n\n\nRow\nSource\nTarget\nProbability\nqvalue\n\n\n\nString\nString\nFloat64\nFloat64\n\n\n\n\n1\nhsa-miR-335-5p\nENSG00000128510.5\n1.0\n0.0\n\n\n2\nhsa-miR-335-3p\nENSG00000128510.5\n1.0\n0.0\n\n\n3\nhsa-miR-3150b-3p\nENSG00000245080.3\n1.0\n3.4931e-8\n\n\n4\nhsa-miR-345-5p\nENSG00000258504.1\n1.0\n1.39759e-7\n\n\n5\nhsa-miR-345-5p\nENSG00000197119.7\n0.999992\n1.70218e-6\n\n\n6\nhsa-let-7b-5p\nENSG00000241990.1\n0.999987\n3.63495e-6\n\n\n7\nhsa-miR-574-3p\nENSG00000197712.6\n0.999967\n7.86251e-6\n\n\n8\nhsa-miR-574-5p\nENSG00000197712.6\n0.999965\n1.12617e-5\n\n\n9\nhsa-let-7b-5p\nENSG00000197182.8\n0.999911\n1.99429e-5\n\n\n10\nhsa-miR-1270-2-5p\nENSG00000231205.6\n0.998541\n0.0001638\n\n\n11\nhsa-miR-3150b-3p\nENSG00000175895.3\n0.997247\n0.000399176\n\n\n12\nhsa-miR-335-5p\nENSG00000106484.8\n0.991704\n0.00105721\n\n\n13\nhsa-miR-335-3p\nENSG00000106484.8\n0.991704\n0.00161402\n\n\n⋮\n⋮\n⋮\n⋮\n⋮\n\n\n25\nhsa-miR-335-5p\nENSG00000158516.7\n0.848667\n0.0513298\n\n\n26\nhsa-miR-1270-2-5p\nENSG00000237440.2\n0.838225\n0.0555776\n\n\n27\nhsa-miR-574-5p\nENSG00000186767.5\n0.831116\n0.0597742\n\n\n28\nhsa-miR-30a-5p\nENSG00000169220.12\n0.820983\n0.0640328\n\n\n29\nhsa-let-7b-5p\nENSG00000165071.10\n0.809671\n0.0683879\n\n\n30\nhsa-miR-574-5p\nENSG00000154803.7\n0.789247\n0.0731334\n\n\n31\nhsa-miR-181c-5p\nENSG00000116157.5\n0.789079\n0.0775781\n\n\n32\nhsa-miR-181c-5p\nENSG00000129465.11\n0.782729\n0.0819435\n\n\n33\nhsa-miR-1908-5p\nENSG00000134824.9\n0.778177\n0.0861823\n\n\n34\nhsa-miR-345-5p\nENSG00000131116.5\n0.776538\n0.0902199\n\n\n35\nhsa-miR-345-5p\nENSG00000253239.1\n0.761621\n0.0944531\n\n\n36\nhsa-miR-200b-3p\nENSG00000247679.2\n0.743472\n0.0989551\n\n\n\n\n\n\n\n\nCausal test combinations\nAs indicated above, causal inference requires the combination of multiple statistical tests, and BioFindr.jl supports multiple such combinations, each with their own strengths and weaknesses. Comparisons between the different methods can be found in the original BioFindr paper and in a follow-up paper. In brief, the following combinations are available:\n\nInstrumental variables (default)\nThe instrumental variables (IV) test combination infers a causal \\(A\\to B\\) interaction if there is a genetic association \\(E\\to B\\), where \\(E\\) is the causal anchor (best cis-eQTL for \\(A\\)), and if \\(A\\) and \\(B\\) are not independently associated with \\(E\\) (no pleiotropic effect). This test combination has been shown to provide a good balance between false negative and false positive rate and has a clear genetic interpretation. It is therefore recommended as the default combination. To use the instrumental variable test combination, you don’t need to do anything (it’s the default):\n\ndP = findr(dm, dgm, dpm; FDR=0.1);\n\nor, you can explicitly set the optional parameter combination=\"IV\":\n\ndP = findr(dm, dgm, dpm; FDR=0.1, combination=\"IV\");\n\n\n\nMediation\nThe mediation test infers a causal \\(A\\to B\\) interaction if there is a genetic association \\(E\\to B\\) and if this association disappears after conditioning on \\(A\\). If these two tests are true, the causal graph must be \\(E\\to A\\to B\\). As a result, this test combination has a very low false positive rate, but in most applications it is hampered by a high false negative rate: if \\(A\\) and \\(B\\) are jointly regulated by a third factor \\(C\\), the mediation test will fail even in the presence of a true \\(A\\to B\\) interaction. To use the mediation test combination, set the optional parameter combination=\"mediation\":\n\ndP_med = findr(dm, dgm, dpm; FDR=0.1, combination=\"mediation\");\n\n\n\nOriginal BioFindr combination\nIn the original BioFindr paper, a new test combination was proposed that combines the instrumental variable test combination with a new relevance test. On simulated data, this new combination further reduced the false negative rate compared to the IV combination. at the expense of an increased false positive rate, for an overall improved performance. However, the relevance test does not have a clear genetic or causal interpretation, and on real data, performance is generally equivalent to the IV combination, and therefore the IV combination is now recommended as the default. To use the original BioFindr test combination, set the optional parameter combination=\"orig\":\n\ndP_orig = findr(dm, dgm, dpm; FDR=0.1, combination=\"orig\");"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "BioFindr Tutorials",
    "section": "",
    "text": "Welcome to a set of tutorials for the BioFindr.jl package, an implementation of the Findr software in Julia. BioFindr is a software package for coexpression analysis, association analysis, and causal inference from multi-omics data.\nThe methods implemented in BioFindr were developed by Lingfei Wang and Tom Michoel, and were first described in the paper “Efficient and accurate causal inference with hidden confounders from genome-transcriptome variation data”.\nThese tutorials should be read alongside the BioFindr.jl documentation. Make sure to read the installation instructions if you want to run these tutorials locally."
  },
  {
    "objectID": "internal-functions-1.html",
    "href": "internal-functions-1.html",
    "title": "Internal functions",
    "section": "",
    "text": "The only function exported by BioFindr.jl is the findr function itself. Nevertheless, many of the internal functions may be useful when digging deeper in the results for specific genes. The package documentation contains detailed descriptions of all package functions, intertwined with the methods section of the original paper, and should give a good overview of what is available. To illustrate how these functions can be used, we will reproduce the following figure (Supplementary Fig. S1 from the original paper):\n\n\n\nLLR distribution of the relevance test for hsa-miR-200b-3p on 23722 potential targets of Geuvadis dataset."
  },
  {
    "objectID": "internal-functions-1.html#introduction",
    "href": "internal-functions-1.html#introduction",
    "title": "Internal functions",
    "section": "",
    "text": "The only function exported by BioFindr.jl is the findr function itself. Nevertheless, many of the internal functions may be useful when digging deeper in the results for specific genes. The package documentation contains detailed descriptions of all package functions, intertwined with the methods section of the original paper, and should give a good overview of what is available. To illustrate how these functions can be used, we will reproduce the following figure (Supplementary Fig. S1 from the original paper):\n\n\n\nLLR distribution of the relevance test for hsa-miR-200b-3p on 23722 potential targets of Geuvadis dataset."
  },
  {
    "objectID": "internal-functions-1.html#set-up-the-environment",
    "href": "internal-functions-1.html#set-up-the-environment",
    "title": "Internal functions",
    "section": "Set up the environment",
    "text": "Set up the environment\n\nusing DrWatson\nquickactivate(@__DIR__)\n\nusing DataFrames\nusing Arrow\nusing StatsPlots\nusing LaTeXStrings\nusing Distributions\n\nusing BioFindr\n\n[ Info: Precompiling StatsPlots [f3b207a7-027a-5e70-b257-86293d7955fd]"
  },
  {
    "objectID": "internal-functions-1.html#load-data",
    "href": "internal-functions-1.html#load-data",
    "title": "Internal functions",
    "section": "Load data",
    "text": "Load data\nYou should by now be familiar with the GEUVADIS data used in the First steps tutorials. Here we need the following files:\n\ndt = DataFrame(Arrow.Table(datadir(\"exp_pro\",\"findr-data-geuvadis\", \"dt.arrow\")));\ndm = DataFrame(Arrow.Table(datadir(\"exp_pro\",\"findr-data-geuvadis\", \"dm.arrow\")));\ndgm = DataFrame(Arrow.Table(datadir(\"exp_pro\",\"findr-data-geuvadis\", \"dgm.arrow\")));\n\nWe also need the microRNA eQTL mapping (see the causal inference tutorial):\n\ndpm = DataFrame(SNP_ID = names(dgm), GENE_ID=names(dm)[1:ncol(dgm)]);\n\nSet the microRNA of interest:\n\nmirA = \"hsa-miR-200b-3p\";"
  },
  {
    "objectID": "internal-functions-1.html#run-the-analysis",
    "href": "internal-functions-1.html#run-the-analysis",
    "title": "Internal functions",
    "section": "Run the analysis",
    "text": "Run the analysis\n\nConvert the data\nInternally, all BioFindr.jl functions use matrix-based inputs and supernormalized data. The easiest way to convert our data is to run supernormalize on the initial data:\n\nYt = BioFindr.supernormalize(dt);\nYm = vec(BioFindr.supernormalize(select(dm,mirA)));\n\nFor the genotype data, no conversion is needed:\n\nE = dgm[:, dpm.SNP_ID[dpm.GENE_ID.==mirA][1]];\n\nWe will also need the number of samples and number of genotype groups:\n\nns = length(E);\nng = length(unique(E));\n\n\n\nCompute log-likelihood ratios\nThroughout the package, the likelihood ratio tests are labelled by the following symbols\n\nTest 2 (Linkage test): :link\nTest 3 (Mediation test): :med\nTest 4 (Relevance test): :relev\nTest 5 (Pleiotropy test): :pleio\n\nSince all log-likelihood ratios are computed from the same summary statistics, a single function computes them all. To compute the log-likelihood ratios for a specific A-gene (here: hsa-miR-200b-3p with column vector of expression data Ym) with a causal instrument (best eQTL) with genotype vector E, run:\n\nllr2, llr3, llr4, llr5 = BioFindr.realLLR_col(Yt, Ym, E);\n\nIf you know you’re only going to use one of them, you can also run:\n\n_ , _ , llr4 , _ = BioFindr.realLLR_col(Yt, Ym, E);\n\n\n\nCompute posterior probabilities\nPosterior probabilities are computed by fitting a mixture model to the observed vector of log-likelihood ratios. Two fitting methods are implmented: a method of moments or using kernel density estimation. The method of moments is the default:\n\npp_mom, dmix = BioFindr.fit_mixdist_mom(llr4, ns, ng, :relev);\n\nThe KDE estimate is obtained similarly:\n\npp_kde = BioFindr.fit_mixdist_KDE(llr4, ns, ng, :relev);\n\nThe method of moments has a second output argument, dmix, a mixture model distribution object where each mixture component is an LBeta dsitribution:\n\ndmix\n\nMixtureModel{BioFindr.LBeta}(K = 2)\ncomponents[1] (prior = 0.7563): BioFindr.LBeta(α=3.0, β=356.0)\ncomponents[2] (prior = 0.2437): BioFindr.LBeta(α=3.0, β=173.86323336296465)\n\n\nThe first component in the mixture model is the null distribution, which can also be created as follows:\n\ndnull = BioFindr.nulldist(ns,ng,:relev)\n\nBioFindr.LBeta(α=3.0, β=356.0)\n\n\nThe prior of the null component is the estimated proportion of truly null features in the observed log-likelihood ratio vector llr4:\n\nπ₀ = dmix.prior.p[1]\n\n0.7562600118033892\n\n\nWe can verify that both methods (moments and KDE) give similar posterior probabilities\nscatter(pp_mom,pp_kde, markersize=4)\n\n\nCompute p-values under the null hypothesis\nWe don’t need null p-values to reproduce the figure above, but they can be used to assess the quality of the \\(\\pi_0\\) estimate.\n\npnull = BioFindr.nullpval(llr4,ns,ng,:relev);\n\nWe can verify that the histogram shows the characteristic shape of a set of anti-conservative p-values and that \\(\\pi_0\\) correctly estimates the height of the “flat” portion of the histogram near \\(p\\approx 1\\):\n\nhistogram(pnull, normalize=:pdf, bins=100, label=\"\")\nhline!([π₀],linewidth=2, label=\"\", linecolor=:red)\nxlims!(0,1)\nxlabel!(\"Null p-value\")\nylabel!(\"Observed distribution\")\nannotate!(0.95,0.95, (L\"\\pi_0\", 18, :red))"
  },
  {
    "objectID": "internal-functions-1.html#reproduce-the-figure",
    "href": "internal-functions-1.html#reproduce-the-figure",
    "title": "Internal functions",
    "section": "Reproduce the figure",
    "text": "Reproduce the figure\n\nMethod of moments estimates\nFor the method of moments, the null and real log-likelihood ratio distribution are available in the form of distribution objects, and we can simply evaluate their pdfs on a range of values:\n\nlval = range(0,maximum(llr4),500);\npnull_val = π₀ * pdf.(dnull,lval);\npreal_val = pdf.(dmix,lval);\npp_val = 1 .- pnull_val ./ preal_val;\n\nPlot the final figure:\n\nhistogram(llr4, normalize=:pdf, bins=100, color=:navajowhite1, label=\"Real data\", size=(600,450))\nplot!(lval,preal_val, linewidth=2, color=:black, label=L\"p(LLR^{(4)})\")\nplot!(lval,pnull_val, linewidth=2, color=:red, label=L\"\\pi_0 p(LLR^{(4)} \\mid \\mathcal{H}_0)\", legend=(0.25,0.95))\nylims!(0, 160)\nxlabel!(L\"LLR^{(4)}\")\nylabel!(L\"p(LLR^{(4)})\")\nplot!(twinx(),lval,pp_val, linewidth=2, color=:blue, label=\"\", yguidefontcolor=:blue, ylims=(0,1.), ylabel=L\"P(H^{(4)}_{alt} \\mid LLR^{(4)})\")\n#ylabel(L\"P(H^{(4)}_{alt} \\mid LLR^{(4)})\")\nxlims!(0,0.03)\n\n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n  \n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCompared to the figure at the top of the page, we see that the method of moments provides a smooth fit to the histogram and consequently also posterior probabilities that increase more smoothly with increasing LLR values.\n\n\nKDE estimates\nFor the KDE method, we don’t have a distribution object fitting the histogram. Instead with use kernel density estimation and return estimated pdf values at every value of the LLR input vector:\n\npreal_kde = BioFindr.fit_kde(llr4);\n\nFor plotting, we filter a relevant range of values from all vectors:\n\nrg = 1:50:length(llr4);\nt = sortperm(llr4);\nlval_kde = llr4[t][rg];\npreal_val_kde = preal_kde[t][rg];\npp_val_kde = pp_kde[t][rg];\n\nAnd plot the figure again:\n\nhistogram(llr4, normalize=:pdf, bins=100, color=:navajowhite1, label=\"Real data\", size=(600,450))\nplot!(lval_kde,preal_val_kde, linewidth=2, color=:black, label=L\"p(LLR^{(4)})\")\nplot!(lval,pnull_val, linewidth=2, color=:red, label=L\"\\pi_0 p(LLR^{(4)} \\mid \\mathcal{H}_0)\", legend=(0.25,0.95))\nylims!(0, 160)\nxlabel!(L\"LLR^{(4)}\")\nylabel!(L\"p(LLR^{(4)})\")\nplot!(twinx(),lval_kde,pp_val_kde, linewidth=2, color=:blue, label=\"\", yguidefontcolor=:blue, ylims=(0,1.), ylabel=L\"P(H^{(4)}_{alt} \\mid LLR^{(4)})\")\n#ylabel(L\"P(H^{(4)}_{alt} \\mid LLR^{(4)})\")\nxlims!(0,0.03)"
  },
  {
    "objectID": "matrix-data.html",
    "href": "matrix-data.html",
    "title": "Matrix-based data",
    "section": "",
    "text": "Internally, all BioFindr.jl functions work with matrices or array-based data, and the DataFrame based findr methods used in the coexpression analysis, association analysis, and causal inference tutorials are wrapper functions provided for convenience. If you prefer matrix-based data over DataFrames, you can directly use matrix-based findr methods without having to create DataFrames first."
  },
  {
    "objectID": "matrix-data.html#introduction",
    "href": "matrix-data.html#introduction",
    "title": "Matrix-based data",
    "section": "",
    "text": "Internally, all BioFindr.jl functions work with matrices or array-based data, and the DataFrame based findr methods used in the coexpression analysis, association analysis, and causal inference tutorials are wrapper functions provided for convenience. If you prefer matrix-based data over DataFrames, you can directly use matrix-based findr methods without having to create DataFrames first."
  },
  {
    "objectID": "matrix-data.html#set-up-the-environment",
    "href": "matrix-data.html#set-up-the-environment",
    "title": "Matrix-based data",
    "section": "Set up the environment",
    "text": "Set up the environment\n\nusing DrWatson\nquickactivate(@__DIR__)\n\nusing DataFrames\nusing Arrow\n\nusing BioFindr"
  },
  {
    "objectID": "matrix-data.html#load-data",
    "href": "matrix-data.html#load-data",
    "title": "Matrix-based data",
    "section": "Load data",
    "text": "Load data\nLet’s pretend our GEUVADIS data is in a matrix-based format:\n\nXt = Matrix(DataFrame(Arrow.Table(datadir(\"exp_pro\",\"findr-data-geuvadis\", \"dt.arrow\"))));\nXm = Matrix(DataFrame(Arrow.Table(datadir(\"exp_pro\",\"findr-data-geuvadis\", \"dm.arrow\"))));\nGm = Matrix(DataFrame(Arrow.Table(datadir(\"exp_pro\",\"findr-data-geuvadis\", \"dgm.arrow\"))));\n\nWe also need the microRNA eQTL mapping (see the causal inference tutorial), in this case in the form of an array where each row corresponds to a cis-eQTL/eGene pair represented by of a column index of Gm (i.e. a SNP) and a column index of Xm (i.e. a microRNA). Recall that due to the preprocessing of the findr-geuvadis data. the column indices are identical, but this will not be the case in general:\n\nmirpairs = zeros(Int32,size(Gm,2),2);\nfor k=1:size(mirpairs,1)\n    mirpairs[k,:] = [k k]\nend\n\nNote that data must be stored in matrices where columns correspond to variables (genes, SNPs, etc.) and rows correspond to observations (samples)."
  },
  {
    "objectID": "matrix-data.html#run-biofindr.jl",
    "href": "matrix-data.html#run-biofindr.jl",
    "title": "Matrix-based data",
    "section": "Run BioFindr.jl",
    "text": "Run BioFindr.jl\nBelow, we only show the relevant findr commands. Check the corresponding tutorials and BioFindr.jl documentation for more details.\n\nCoexpression analysis\n\nAll-vs-all\nCoexpression analysis on a single matrix returns a square matrix with dimensions equal to the number of variables (columns) in the input matrix:\n\nP = findr(Xm)\n\n674×674 Matrix{Float64}:\n 1.0        0.0453818   0.225592   …  0.0332217  0.107904   0.105772\n 0.0889502  1.0         0.102236      0.0474569  0.731827   0.248213\n 0.1729     0.0403721   1.0           0.777618   0.106922   0.1002\n 0.0159859  0.106602    0.0893431     0.0699576  0.098629   0.122935\n 0.120573   0.112145    0.238959      0.0346163  0.164631   0.297973\n 0.0624062  0.0586858   0.0694624  …  0.569015   0.104281   0.186142\n 0.423979   0.0332279   0.0971337     0.0435612  0.124816   0.094099\n 0.0533054  0.0266426   0.559493      0.0550043  0.34664    0.0981003\n 0.114737   0.0143626   0.1419        0.0439354  0.192045   0.131555\n 0.176766   0.48804     1.0           0.0337898  0.213006   0.133968\n 0.360143   0.153889    0.425408   …  0.0332874  0.163973   0.187538\n 0.182787   0.0493317   0.0386118     0.0538748  0.105971   0.160988\n 0.676394   0.0264916   0.444864      0.11139    0.281354   0.0970358\n ⋮                                 ⋱                        \n 0.0763606  0.0436318   0.868105      0.0379098  0.0992675  0.157452\n 0.190505   0.137327    0.113494      0.0334964  0.379698   0.516604\n 0.378913   0.00636714  0.969245      0.0333967  0.218768   0.0972078\n 0.0925918  0.00949055  0.11976    …  0.044673   0.111653   0.0953303\n 0.1283     0.0292623   0.789323      0.0366376  0.190591   0.0937124\n 0.115916   0.0566189   0.0567839     0.0330524  0.243382   0.123887\n 0.0371264  0.0516759   0.177314      0.0620753  0.111248   0.817595\n 0.286305   0.132744    0.106446      0.0361477  0.112938   0.152742\n 0.162885   0.178503    0.105606   …  0.999703   0.116572   0.0951264\n 0.0429484  0.123023    0.905047      1.0        0.122408   0.912701\n 0.0920713  0.715456    0.108091      0.0425472  1.0        1.0\n 0.0982375  0.312023    0.0995635     0.7971     1.0        1.0\n\n\nIn the output, columns correspond to A-genes (causal factors) and rows to B-genes (targets), that is:\n\\[\nP_{i,j} = P(X_j \\to X_i)\n\\]\nNote that the diagonal is arbitrarily set to one, BioFindr cannot make any inferences about the presence or absence of self-regulation!\n\n\nBipartite\nAnalyse coexpression from a subset of variables to the whole set:\n\nP = findr(Xm; cols=[1,3,7,50])\n\n674×4 Matrix{Float64}:\n 1.0        0.225592   0.346674   0.245078\n 0.0889502  0.102236   0.113262   0.162557\n 0.1729     1.0        0.11442    0.073312\n 0.0159859  0.0893431  0.146108   0.473624\n 0.120573   0.238959   0.239501   0.0620736\n 0.0624062  0.0694624  0.0989481  0.0511453\n 0.423979   0.0971337  1.0        0.203824\n 0.0533054  0.559493   0.201162   0.124401\n 0.114737   0.1419     0.0934371  0.23661\n 0.176766   1.0        0.133559   0.116917\n 0.360143   0.425408   0.114545   0.288854\n 0.182787   0.0386118  0.123711   0.146996\n 0.676394   0.444864   0.135674   0.260814\n ⋮                                \n 0.0763606  0.868105   0.265134   0.513929\n 0.190505   0.113494   0.260401   0.114172\n 0.378913   0.969245   0.213968   0.130775\n 0.0925918  0.11976    0.197852   0.32143\n 0.1283     0.789323   0.132733   0.283125\n 0.115916   0.0567839  0.513517   0.239496\n 0.0371264  0.177314   0.140021   0.298428\n 0.286305   0.106446   0.158433   0.39212\n 0.162885   0.105606   0.104283   0.347775\n 0.0429484  0.905047   0.139504   0.0675872\n 0.0920713  0.108091   0.139412   0.0202383\n 0.0982375  0.0995635  0.0917764  0.375652\n\n\nAnalyse coexpression from the variables in Xm to the variables in Xt:\n\nP = findr(Xt,Xm)\n\n23722×674 Matrix{Float64}:\n 0.0234184  0.00291162  0.732244     …  0.156543    0.0361393  0.0764542\n 0.0221085  0.00435185  0.472921        0.306938    0.0698138  0.125194\n 0.0241246  0.00209359  0.351981        0.0358197   0.0646466  0.0804391\n 0.532158   0.00245132  0.616879        0.00249436  0.0958314  0.0656744\n 0.0222376  0.00256429  0.0337209       0.0317953   0.0874541  0.691511\n 0.0311296  0.00405144  0.282852     …  0.0512983   0.0662781  0.841356\n 0.0212987  0.00689882  0.300301        0.226043    0.0351949  0.1855\n 0.0590008  0.00292483  0.146968        0.0127612   0.0549558  0.0626004\n 0.0217252  0.00209742  0.276152        0.237079    0.0438237  0.361715\n 0.0226942  0.00344102  0.00199485      0.0140767   0.0350283  0.267969\n 0.0213827  0.00532704  0.455821     …  0.197865    0.0368173  0.0158116\n 0.0343095  0.00236632  0.534035        0.429556    0.0311012  0.0787474\n 0.0214705  0.00207517  0.520825        0.239688    0.609959   0.99285\n ⋮                                   ⋱                         \n 0.063287   0.0026124   0.955061     …  0.983501    0.103916   0.353626\n 0.0230399  0.0200878   0.14564         0.00081434  0.0299894  0.152551\n 0.0244435  0.00362406  0.230516        0.679986    0.0488017  0.452377\n 0.0439679  0.00265316  0.0162124       0.113298    0.0386101  0.0763466\n 0.0481255  0.0152828   0.10255         0.227967    0.069969   0.323395\n 0.0219638  0.0025475   0.129958     …  0.797988    0.0437969  0.235947\n 0.0359421  0.00217451  0.0695795       0.0309512   0.0536083  0.0518225\n 0.0228804  0.00371468  0.122758        0.404031    0.0544299  0.175212\n 0.0214806  0.00207504  0.000637106     0.266088    0.0540143  0.153354\n 0.0225533  0.00213282  0.0144905       0.0383339   0.0452756  0.0636567\n 0.0285356  0.00291061  0.0484913    …  0.044657    0.0463433  0.235425\n 0.0628126  0.0021249   0.0326125       0.00878032  0.117111   0.42914\n\n\n\n\n\nAssociation analysis\nTesting associations between eQTL genotypes in Gmand microRNA expression levels in Xm:\n\nP = findr(Xm,Gm)\n\n674×55 Matrix{Float64}:\n 0.99709    0.336726  0.0       0.0  …  0.000455842  0.0  0.00194948\n 0.076501   0.999976  0.0       0.0     0.000743437  0.0  0.00511882\n 0.0534877  0.199234  1.0       0.0     0.000448411  0.0  0.00836276\n 0.0231871  0.441697  0.0       1.0     0.000418771  0.0  0.00229785\n 0.0359331  0.418019  0.0       0.0     0.000657638  0.0  0.00169117\n 0.0434282  0.35389   0.0       0.0  …  0.00166157   0.0  0.00197825\n 0.0243615  0.370613  0.0       0.0     0.000723086  0.0  1.0\n 0.0244173  0.314934  0.0       0.0     0.00219063   0.0  0.0108873\n 0.0357465  0.209157  0.0       0.0     0.00064661   0.0  0.00470863\n 0.110227   0.376232  0.999825  0.0     0.00167592   0.0  0.00316303\n 0.0281279  0.415582  0.0       0.0  …  0.000939568  0.0  0.00779912\n 0.027045   0.274934  0.0       0.0     0.00101715   0.0  0.00163995\n 0.0603348  0.366114  0.0       0.0     0.000360567  0.0  0.00454491\n ⋮                                   ⋱                    \n 0.0374556  0.322883  0.0       0.0     0.000363842  0.0  0.00862389\n 0.02492    0.227238  0.0       0.0     0.000602233  0.0  0.00375107\n 0.0311861  0.219238  0.0       0.0     0.00039574   0.0  0.00327624\n 0.0795592  0.231186  0.0       0.0  …  0.00140163   0.0  0.00415341\n 0.046263   0.215004  0.0       0.0     0.000416495  0.0  0.00505554\n 0.0303016  0.539201  0.0       0.0     0.008878     0.0  0.00257078\n 0.0548847  0.546104  0.0       0.0     0.000603634  0.0  0.00463545\n 0.0267455  0.511972  0.0       0.0     0.000423386  0.0  0.00158495\n 0.0463963  0.557115  0.0       0.0  …  0.00110603   0.0  0.00157338\n 0.105566   0.235344  0.0       0.0     0.00102074   0.0  0.00651383\n 0.0220181  0.219283  0.0       0.0     0.000538151  0.0  0.00476893\n 0.0307281  0.270128  0.0       0.0     0.000459762  0.0  0.0735222\n\n\nIn the output, columns correspond to eQTLs and rows to genes, that is,\n\\[\nP_{i,j} = P(E_j \\to X_i)\n\\]\n\n\nCausal inference\n\nSubset-to-all\nWhen you run causal inference with findr using matrix-based inputs, the default is to return posterior probabilities for each test separately:\n\nP = findr(Xm,Gm,mirpairs);\n\nNote the dimensions of P:\n\nsize(P)\n\n(674, 4, 55)\n\n\nThe third dimension indexes the A-genes (causes), the second dimension the tests (test 2-5, see link above), and the first the B-genes (targets). If you are interested only in a specific combination, use the optional combination argument as explained in the causal inference tutorial:\n\nP = findr(Xm,Gm,mirpairs; combination=\"IV\");"
  }
]